Основное задание:
Написать приложение, которое будет реализовывать алгоритм сортировки по переданным классам.
    1) Программа должна выполняться в цикле. Выход из цикла возможен только путем соответствующего выбора пользователя.
    2) Пользователь должен иметь возможность выбирать варианты заполнения исходного массива данных (из файла, рандом, вручную) и его длину.
    3) У пользователя должна быть возможность найти какой-либо элемент отсортированной коллекции при помощи алгоритма бинарного поиска, который также необходимо реализовать.
    4) Сортировки и бинарный поиск должны быть реализованы с использованием дженериков и быть универсальными под любые классы программы.
    5) В программе должен использоваться паттерн стратегия.
    6) Сортировать необходимо кастомные классы – класс должен иметь реализованный паттерн Builder.
    7) Для вводимых данных (в т.ч. из файла) должна производиться валидация данных.
    8) Сортировка должна выполняться в ThreadPool и быть выполнена в несколько потоков (минимум 2).

Общее требования:
- Все классы должны базово реализовывать сортировку по всем 3 полям;
- Для кастомной сортировки разрешено использовать компаратор;
- Запрещено применять готовые реализации сортировки, поиска и паттернов;
- В программе также должны быть реализованы тесты к написанному коду. (Классические тестовые библиотеки использовать не обязательно (но можно), так как мы их не изучали, достаточно просто тестов в отдельных классах, реализованных руками.)
- Приложение должно быть выложено на Github/Gitlab, количество веток с кодом должно соответствовать количеству участников (минимум), все ветки в итоге должны быть смерджены в мастер/мейн ветку. Результат прикрепить в виде ссылки на Github/Gitlab;
- Вся архитектура и код-стайл должны соответствовать конвенциям языка Java.
- Два метода сортировки - необязательно!

Дополнительное задание 1:
    Дополнительно к основным сортировкам реализовать эти же алгоритмы сортировки таким образом, что объекты классов будут сортироваться по какому-либо числовому полю: объекты с четными значениями этого поля должны быть отсортированы в натуральном порядке, а с нечетными – оставаться на исходных позициях.

Дополнительное задание 2:
    Реализовать функционал для записи отсортированных коллекций/ найденных значений в файл в режиме добавления данных.

Дополнительное задание 3:
    Заполнение коллекций должно осуществляться посредством стримов. Range... где Random...
    3* Коллекции для заполнения должны быть кастомными.

Дополнительное задание 4:
    Реализовать многопоточный метод, подсчитывающий количество вхождений элемента N в коллекцию и выводящий результат в консоль. Через стримы - многопоточные, parallelStream - подсчет элементов. Поделить на части коллекцию и обработать. Или тредпул - разбив на несколько частей.


Причесать Main.java - опция выхода, да и вообще набор опций - выводить на каждом шаге цикла общения с программой.